[["index.html", "Analysing CRISPR Screens with edgeR Welcome What You Will Learn What You Won’t Learn Who We Wrote This For Why We Wrote This", " Analysing CRISPR Screens with edgeR Göknur Giner 2023-10-11 Welcome Welcome to the home of “Analyzing CRISPR Screens with edgeR”. This platform serves as the central hub for a comprehensive guide on leveraging one of the most commonly used differential expression analysis Bioconductor package edgeR, for the analysis of CRISPR screens. Whether you’re delving into CRISPR experiments for the first time or seeking advanced insights, this guide will equip you with essential skills and knowledge to extract meaningful information from your data. What You Will Learn Our mission is to provide you with a robust foundation in the analysis of CRISPR data using edgeR. Throughout this guide, we walk you through various steps of typical workflows using example data sets to check the quality of sequencing data, count the single guide RNAs (sgRNAs), process, analyze, visualize, and explore the differential abundance of the sgRNAs and related the pathways. By doing so, we address key concepts and methodologies, ensuring a deep understanding of the intricacies involved in CRISPR data analysis. What You Won’t Learn The landscape of CRISPR data analysis is vast and diverse. In this guide, we focus on specific tool—edgeR provided by Bioconductor. While we aim to cover edgeR comprehensively, it’s important to note that the realm of bioinformatic analysis offers numerous possibilities, depending on the experimental setup and biological system. Our guide provides a starting point for your exploration, acknowledging the richness of available tools beyond the scope of this book. Recognize that your specific data may require a tailored approach, and our examples serve as templates rather than one-size-fits-all solutions. We encourage you to view them as a foundation upon which you can build and adapt for your unique analyses. Who We Wrote This For This guide is crafted with both novice and experienced researchers in mind. Whether you’re an experimental biologist stepping into the realm of CRISPR data or a seasoned bioinformatician seeking insights into edgeR in the context of CRISPR gene editing, you’ll find valuable content here. We make minimal assumptions about your previous programming or statistical experience, aiming to create a resource that is accessible to a broad audience. We welcome feedback from all users to improve this guide continually, enhancing accessibility and refining technical details. Your input is instrumental in making this resource more valuable to the community. Why We Wrote This The inception of this guide dates back to the recognition of the growing prominence of CRISPR data analysis within the field of biology. As CRISPR experiments evolved, so did the need for specialized tools. In response, we embarked on creating a guide that not only showcases the capabilities of edgeR but also celebrates the Bioconductor community’s contributions to advancing the field of biological analysis. Our aim is to empower researchers like you with the tools and knowledge needed to navigate the complex landscape of CRISPR data analysis. "],["setting-up.html", "Setting up Install R Install RStudio Install required packages Load required packages Download the material used in this book", " Setting up Install R R can be installed from the R-project website. Direct downloads for all platforms can be downloaded at the links below: Mac Windows Linux Install RStudio RStudio can be installed from the RStudio website. RStudio can be downloaded for all platforms at the link below: https://rstudio.com/products/rstudio/download/ Install required packages if (!require(&quot;BiocManager&quot;, quietly = TRUE)) install.packages(&quot;BiocManager&quot;) BiocManager::install(&quot;edgeR&quot;) BiocManager::install(&quot;GenomicAlignments&quot;) BiocManager::install(&quot;Rsubread&quot;) BiocManager::install(&quot;Biostrings&quot;) BiocManager::install(&quot;AnnotationDbi&quot;) BiocManager::install(&quot;org.Hs.eg.db&quot;) install.packages(&quot;ggplot2&quot;) install.packages(&quot;DT&quot;) install.packages(&quot;ggrepel&quot;) Load required packages library(edgeR) library(GenomicAlignments) library(Rsubread) library(Biostrings) library(AnnotationDbi) library(org.Hs.eg.db) library(ggplot2) library(DT) library(ggrepel) # tidy volcano Download the material used in this book Fastq files GECKO human library "],["counting-the-sgrnas-with-rsubread.html", "Counting the sgRNAs with RSubread Building an index Aligning the fastq files Creating a DGEList object", " Counting the sgRNAs with RSubread Then we load the guide library, and subsequently, we must convert it into the FASTA format to construct an index for alignment. GeCKO &lt;- read.delim(&quot;sgRNA_library/GeCKOv21_Human.tsv&quot;) GeCKO[1:2, ] gene_id UID seq 1 A1BG HGLibA_00001 GTCGCTGAGCTCCGATTCGA 2 A1BG HGLibA_00002 ACCTGTAGTTGCCGGCGTGC sgRNAs &lt;- DNAStringSet(GeCKO$seq) names(sgRNAs) &lt;- GeCKO$UID sgRNAs DNAStringSet object of length 122411: width seq names [1] 20 GTCGCTGAGCTCCGATTCGA HGLibA_00001 [2] 20 ACCTGTAGTTGCCGGCGTGC HGLibA_00002 [3] 20 CGTCAGCGTCACATTGGCCA HGLibA_00003 [4] 20 CGCGCACTGGTCCAGCGCAC HGLibA_00004 [5] 20 CCAAGCTATATCCTGTGCGC HGLibA_00005 ... ... ... [122407] 20 GGTGATGCCCTACCCGATGC HGLibB_57024 [122408] 20 GAGGGCCTCCAACATGTTCT HGLibB_57025 [122409] 20 GTTCTTCAACAGTCCACAAC HGLibB_57026 [122410] 20 CGTCGAGATTCTACTTCTTC HGLibB_57027 [122411] 20 CTGAAACATTTAACCAGTTG HGLibB_57028 Building an index buildindex(&quot;./index/GeCKO&quot;, &quot;./index/GeCKO.fa&quot;, indexSplit = FALSE) Aligning the fastq files fastqs &lt;- dir(path = &quot;./fastq_files&quot;, pattern = &quot;*.fastq.gz&quot;, full.names = TRUE) counts &lt;- list() mapping_results &lt;- list() for (i in 1:length(fastqs)) { mapping_results[[i]] &lt;- align(&quot;./index/GeCKO&quot;, fastqs[i], output_file = gsub(&quot;.fastq.gz&quot;, &quot;.bam&quot;, fastqs[i]), nthreads = 4, unique = TRUE, nBestLocations = 1, type = &quot;DNA&quot;, TH1 = 1, maxMismatches = 0, indels = 0) temp &lt;- readGAlignments(gsub(&quot;.fastq.gz&quot;, &quot;.bam&quot;, fastqs[i])) counts[[i]] &lt;- data.frame(table(seqnames(temp[width(temp) == &quot;20&quot;])), row.names = &quot;Var1&quot;) } my_counts &lt;- do.call(cbind, counts) colnames(my_counts) &lt;- c(&quot;Control_1&quot;, &quot;Control_2&quot;, &quot;ToxA_1&quot;, &quot;ToxA_2&quot;, &quot;ToxB_1&quot;, &quot;ToxB_2&quot;) Creating a DGEList object counts &lt;- read.table(&quot;my_counts.txt&quot;, header = TRUE) group &lt;- factor(c(&quot;Control&quot;, &quot;Control&quot;, &quot;ToxA&quot;, &quot;ToxA&quot;, &quot;ToxB&quot;, &quot;ToxB&quot;), levels = c(&quot;Control&quot;, &quot;ToxA&quot;, &quot;ToxB&quot;)) samples &lt;- data.frame(group = group, sampleName = colnames(counts), biorep = rep(c(1, 2), 3)) genes &lt;- GeCKO names(genes)[names(genes) == &quot;gene_id&quot;] &lt;- &quot;Symbol&quot; d &lt;- DGEList(counts = counts, samples = samples, genes = genes) d An object of class &quot;DGEList&quot; $counts Control_1 Control_2 ToxA_1 ToxA_2 ToxB_1 ToxB_2 HGLibA_00001 0 7 3 2 2 8 HGLibA_00002 0 0 0 0 0 0 HGLibA_00003 1 0 0 0 0 0 HGLibA_00004 9 0 0 0 0 1 HGLibA_00005 1 8 1 0 1 1 122406 more rows ... $samples group lib.size norm.factors sampleName biorep Control_1 Control 338214 1 Control_1 1 Control_2 Control 337711 1 Control_2 2 ToxA_1 ToxA 344188 1 ToxA_1 1 ToxA_2 ToxA 335848 1 ToxA_2 2 ToxB_1 ToxB 356569 1 ToxB_1 1 ToxB_2 ToxB 355131 1 ToxB_2 2 $genes Symbol UID seq HGLibA_00001 A1BG HGLibA_00001 GTCGCTGAGCTCCGATTCGA HGLibA_00002 A1BG HGLibA_00002 ACCTGTAGTTGCCGGCGTGC HGLibA_00003 A1BG HGLibA_00003 CGTCAGCGTCACATTGGCCA HGLibA_00004 A1CF HGLibA_00004 CGCGCACTGGTCCAGCGCAC HGLibA_00005 A1CF HGLibA_00005 CCAAGCTATATCCTGTGCGC 122406 more rows ... ## dir.create(&quot;RData&quot;) save(d, file = &quot;./RData/DGEList.RData&quot;) "],["preprocessing-the-data.html", "Preprocessing the data Guide distribution across samples Gini indices Library sizes by group Removing lowly expressed guides Normalising the sgRNA counts MDS plots", " Preprocessing the data load(&quot;./RData/DGEList.RData&quot;) Guide distribution across samples data &lt;- NULL sample_names &lt;- colnames(d) l &lt;- colSums(!d$counts == 0) data &lt;- data.frame(row.name = sample_names, l = l, t = as.character(d$samples$group)) data &lt;- data[order(data$l, d$samples$group), ] col &lt;- c(&quot;#6DAEB0&quot;, &quot;#FAA578&quot;, &quot;#FFB6C1&quot;) my_bar &lt;- barplot(data$l, xlim = c(0, 70000), names.arg = data$row.name, las = 1, space = 1, xlab = &quot;The number of detected guides&quot;, main = &quot;The distribution of guides&quot;, col = col[as.factor(data$t)], border = NA, legend = TRUE, horiz = TRUE) text(my_bar, x = data$l + 3000 # adjust this number , paste0(&quot;(n:&quot;, data$l, &quot;)&quot;), las = 2) legend(&quot;bottomright&quot;, legend = levels(factor(data$t)), fill = col) Gini indices boxplot(gini(d$counts) ~ d$samples$sampleName, ylab = &quot;Gini Indices&quot;, xlab = &quot;&quot;, cex.axis = 0.8) Library sizes by group yy &lt;- d[, order(d$samples$group, colSums(d$counts))] yy.logcpm &lt;- cpm(yy$counts, log = T) boxplot(yy.logcpm, las = 2, pch = 19, col = col[as.factor(yy$samples$group)], outcex = 0.3, outcol = col[as.factor(yy$samples$group)], labels = colnames(yy.logcpm), main = &quot;SgRNA abundance before filtering&quot;, ylab = &quot;SgRNA representation (log2 cpm normalised reads)&quot;) legend(&quot;topleft&quot;, legend = levels(factor(yy$samples$group)), col = col, pch = 19, cex = 0.5) Removing lowly expressed guides Guides lacking a substantial number of reads in any sample should be excluded from downstream analyses. There are multiple rationales for this choice. From a biological perspective, guides that fail to register at a biologically relevant level in any condition are deemed uninteresting and are consequently disregarded. From a statistical standpoint, the elimination of guides with low counts enhances the reliability of estimating the mean-variance relationship in the data. It also reduces the number of statistical tests required for subsequent analyses focused on differential abundance. To implement this, here we used two filtering methods: one permissive and the other strict. For the rigorous approach, guides with low expression were filtered out, retaining as many guides as possible with meaningful counts. This was achieved using the filterByExpr() function in the edgeR package, a tool commonly applied in RNA-seq experiments for automated gene filtering. Initially, the count matrix contained 122,411 guides. After applying filterByExpr(), 113,395 guides (93%) were removed due to their low presence, leaving 9,016 guides for further analysis. It’s worth noting that filterByExpr() often retains only one guide per gene, which is suboptimal for CRISPR screens, where the collective behavior of multiple guides targeting the same gene is essential for validation. To address this limitation, we used a more permissive filtering approach. This method involved defining guide-wise threshold (th1) and sample-wise threshold (th2). Th1 was computed using count per million (CPM) normalized values, while th2 was determined as the average number of samples in each condition. This approach aims to strike a balance, allowing for the inclusion of as many guides as possible targeting the same gene, facilitating a more robust assessment of the collective impact of guides in CRISPR screens. Consequently, with the permissive approach, we retained 58171 (48%) of the guides. 0.0.1 Remove Non-targeting guides First we remove 1000 Non-targeting sgRNAs. d.raw &lt;- d dim(d &lt;- d[!d$genes$Symbol %in% grep(&quot;Non&quot;, d$genes$Symbol, value = TRUE), ]) [1] 121411 6 Strict filtering keep.exprs &lt;- filterByExpr(d, group = d$samples$group) table(keep.exprs) keep.exprs FALSE TRUE 112601 8810 dim(d.filtered.s &lt;- d[keep.exprs, , keep.lib.sizes = FALSE]) [1] 8810 6 genes_sgrna &lt;- d.filtered.s$genes$Symbol length(unique(genes_sgrna)) [1] 7277 nsgrna &lt;- table(table(genes_sgrna)) nsgrna 1 2 3 4 5 6 5912 1215 135 13 1 1 barplot(nsgrna, col = &quot;#FF9999&quot;, ylim = c(0, 7000), border = NA, main = &quot;The distribution of number of sgRNAs per gene \\n (After strict filtering)&quot;) yy &lt;- d.filtered.s[, order(d.filtered.s$samples$group, colSums(d.filtered.s$counts))] yy.logcpm &lt;- cpm(yy$counts, log = T) boxplot(yy.logcpm, las = 2, pch = 19, cex.axis = 0.5, col = col[as.factor(yy$samples$group)], outcex = 0.3, outcol = col[as.factor(yy$samples$group)], labels = colnames(yy.logcpm), main = &quot;SgRNA abundance after strict filtering&quot;, ylab = &quot;SgRNA representation (log2 cpm normalised reads)&quot;) legend(&quot;topleft&quot;, legend = levels(factor(yy$samples$group)), col = col, pch = 19, cex = 0.5) Permissive filtering th1 &lt;- as.vector(cpm(1, mean(d$samples$lib.size))) th1 # average count per million reads (1e6/mean(d$samples$lib.size)) [1] 2.90183 th2 &lt;- 2 # average number of sample per condition isexprs &lt;- rowSums(cpm(d) &gt; th1) &gt;= th2 table(isexprs) isexprs FALSE TRUE 64038 57373 dim(d.filtered.p &lt;- d[isexprs, ]) [1] 57373 6 genes_sgrna &lt;- d.filtered.p$genes$Symbol length(unique(genes_sgrna)) [1] 19736 nsgrna &lt;- table(table(genes_sgrna)) nsgrna 1 2 3 4 5 6 2672 4968 5933 4162 1688 313 barplot(nsgrna, col = &quot;#FF9999&quot;, ylim = c(0, 7000), border = NA, main = &quot;The distribution of number of sgRNAs per gene \\n (After permissive filtering)&quot;) yy &lt;- d.filtered.p[, order(d.filtered.p$samples$group, colSums(d.filtered.p$counts))] yy.logcpm &lt;- cpm(yy$counts, log = T) boxplot(yy.logcpm, las = 2, pch = 19, cex.axis = 0.5, col = col[as.factor(yy$samples$group)], outcex = 0.3, outcol = col[as.factor(yy$samples$group)], labels = colnames(yy.logcpm), main = &quot;SgRNA abundance after permissive filtering&quot;, ylab = &quot;SgRNA representation (log2 cpm normalised reads)&quot;) legend(&quot;topleft&quot;, legend = levels(factor(yy$samples$group)), col = col, pch = 19, cex = 0.5) Normalising the sgRNA counts During the sample preparation or sequencing process, external factors that are not of biological interest can affect the expression of individual samples. For example, samples processed in the first batch of an experiment can have higher expression overall when compared to samples processed in a second batch. It is assumed that all samples should have a similar range and distribution of expression values. Normalisation is required to ensure that the expression distributions of each sample are similar across the entire experiment. Here we applied the upperquartile method from calcNormFactors function in edgeR. In the upper-quartile normalization method of Bullard et al (2010), Bullard JH, Purdom E, Hansen KD, Dudoit S. (2010) Evaluation of statistical methods for normalization and differential expression in mRNA-Seq experiments. BMC Bioinformatics 11, 94., the scale factors are calculated from the 75% quantile of the counts for each library, after removing genes that are zero in all libraries. When working with DGEList-objects, the normalisation factors are automatically stored. For this dataset, the effect of upperquartile-normalisation is mild, as evident in the magnitude of the scaling factors, which are all not too far from 1 as we expected them to be. yy.norm &lt;- d.filtered.s yy.norm$samples$norm.factors &lt;- calcNormFactors(yy.norm$counts, method = &quot;TMM&quot;) yy.norm$samples[, 1:3] # TMM norm factors of strictly filtered data group lib.size norm.factors Control_1 Control 56390 2.0995847 Control_2 Control 57402 1.8983192 ToxA_1 ToxA 283958 1.8621100 ToxA_2 ToxA 242030 1.9418813 ToxB_1 ToxB 298310 0.2919254 ToxB_2 ToxB 300952 0.2376826 yy.norm$samples$norm.factors &lt;- calcNormFactors(yy.norm$counts + 100, method = &quot;upperquartile&quot;) yy.norm$samples[, 1:3] # Upperquartile norm factors of strict filtered data group lib.size norm.factors Control_1 Control 56390 1.0911486 Control_2 Control 57402 1.0899719 ToxA_1 ToxA 283958 1.0935077 ToxA_2 ToxA 242030 1.0929344 ToxB_1 ToxB 298310 0.8436597 ToxB_2 ToxB 300952 0.8339069 yy.norm &lt;- d.filtered.p yy.norm$samples$norm.factors &lt;- calcNormFactors(yy.norm$counts, method = &quot;TMM&quot;) yy.norm$samples[, 1:3] # TMM norm factors of permissive filtered data group lib.size norm.factors Control_1 Control 338214 1.3660602 Control_2 Control 337711 1.3232627 ToxA_1 ToxA 344188 1.2026100 ToxA_2 ToxA 335848 1.1862281 ToxB_1 ToxB 356569 0.6792538 ToxB_2 ToxB 355131 0.5708986 yy.norm$samples$norm.factors &lt;- calcNormFactors(yy.norm$counts + 100, method = &quot;upperquartile&quot;) yy.norm$samples[, 1:3] # Upperquartile norm factors of permissive filtered data group lib.size norm.factors Control_1 Control 338214 1.0326478 Control_2 Control 337711 1.0332658 ToxA_1 ToxA 344188 0.9818947 ToxA_2 ToxA 335848 1.0031259 ToxB_1 ToxB 356569 0.9801216 ToxB_2 ToxB 355131 0.9708126 MDS plots cols &lt;- col plotMDS(yy.norm, col = cols[factor(yy.norm$samples$group)], main = &quot;MDS plot before normalisation&quot;, pch = 16, cex = 2) legend(&quot;bottomright&quot;, legend = levels(factor(yy.norm$samples$group)), col = cols, pch = 16, cex = 0.8) "],["differential-abundance-analysis-at-guide-level.html", "Differential abundance analysis at guide level Create a design matrix Biological variation Fit a statistical model Visualise hit guides", " Differential abundance analysis at guide level Create a design matrix design &lt;- model.matrix(~group, data = yy.norm$samples) design (Intercept) groupToxA groupToxB Control_1 1 0 0 Control_2 1 0 0 ToxA_1 1 1 0 ToxA_2 1 1 0 ToxB_1 1 0 1 ToxB_2 1 0 1 attr(,&quot;assign&quot;) [1] 0 1 1 attr(,&quot;contrasts&quot;) attr(,&quot;contrasts&quot;)$group [1] &quot;contr.treatment&quot; Biological variation yy.norm &lt;- estimateDisp(yy.norm, design) plotBCV(yy.norm) Fit a statistical model fit &lt;- glmFit(yy.norm, design) lrt &lt;- glmLRT(fit, coef = &quot;groupToxA&quot;) topToxAvsCtrl.all &lt;- topTags(lrt, n = Inf, sort.by = &quot;PValue&quot;)$table topToxAvsCtrl &lt;- topTags(lrt, n = Inf, sort.by = &quot;PValue&quot;)$table dim(topToxAvsCtrl &lt;- topToxAvsCtrl[topToxAvsCtrl$FDR &lt; 0.05, ]) [1] 24007 8 topToxAvsCtrl$sgRNA &lt;- rownames(topToxAvsCtrl) topToxAvsCtrl$Gene_Regulation[topToxAvsCtrl$logFC &gt;= 0] &lt;- &quot;Enriched in ToxA&quot; topToxAvsCtrl$Gene_Regulation[topToxAvsCtrl$logFC &lt; 0] &lt;- &quot;Depleted in ToxA&quot; head(topToxAvsCtrl &lt;- topToxAvsCtrl[topToxAvsCtrl$Symbol %in% alias2Symbol(topToxAvsCtrl$Symbol), ]) Symbol UID seq logFC logCPM HGLibB_38324 PRDM13 HGLibB_38324 GCAAGTACCTGTCAGACCGC 11.516058 10.783644 HGLibB_33525 OR11H1 HGLibB_33525 ACAACATGGTCAATAATGTT 7.846384 8.149150 HGLibA_32966 NUDT2 HGLibA_32966 ATGAGCACCAAGCCTACCGC 11.697438 8.734443 HGLibA_22142 HS6ST1 HGLibA_22142 TCACCTGGGCGTGCGCAGCG 8.995157 10.028787 HGLibA_07161 CAPN15 HGLibA_07161 CATGTCGTCCACCAGCACCG 8.341491 9.138581 HGLibA_36228 PGC HGLibA_36228 ACGACTCGCTGGGGTTGAAG 10.546714 7.590395 LR PValue FDR sgRNA Gene_Regulation HGLibB_38324 208.4698 2.962916e-47 1.699914e-42 HGLibB_38324 Enriched in ToxA HGLibB_33525 173.5387 1.248340e-39 3.581049e-35 HGLibB_33525 Enriched in ToxA HGLibA_32966 165.5451 6.954012e-38 1.329908e-33 HGLibA_32966 Enriched in ToxA HGLibA_22142 132.4452 1.195597e-30 1.714875e-26 HGLibA_22142 Enriched in ToxA HGLibA_07161 126.4760 2.419048e-29 2.775761e-25 HGLibA_07161 Enriched in ToxA HGLibA_36228 123.9671 8.565128e-29 8.190118e-25 HGLibA_36228 Enriched in ToxA datatable(format(topToxAvsCtrl &lt;- topToxAvsCtrl[order(topToxAvsCtrl$FDR, decreasing = FALSE), c(-2, -3)], format = &quot;e&quot;, digits = 3)) dir.create(&quot;tables&quot;) write.csv(topToxAvsCtrl, file = paste0(&quot;./tables/&quot;, Sys.Date(), &quot;-ToxAvsCtrl-DE-sgRNAs-GGiner.csv&quot;)) Visualise hit guides A volcano plot is a scatter plot that visualizes the differential abundance of guides. The fold change is typically displayed on the x-axis, while the y-axis represents the corresponding p-values. The significantly differentially abundant genes are the ones found in the upper-left and upper-right corners. # remove rows that contain NA values de &lt;- topToxAvsCtrl.all[complete.cases(topToxAvsCtrl.all), ] colnames(de)[colnames(de) == &quot;logFC&quot;] &lt;- &quot;log2FoldChange&quot; colnames(de)[colnames(de) == &quot;PValue&quot;] &lt;- &quot;pvalue&quot; colnames(de)[colnames(de) == &quot;Symbol&quot;] &lt;- &quot;gene_symbol&quot; colnames(de)[colnames(de) == &quot;FDR&quot;] &lt;- &quot;adjusted_pvalue&quot; de$diffabundant &lt;- &quot;Pass p-value cuttoff&quot; de$diffabundant[de$adjusted_pvalue &gt; 0.05] &lt;- &quot;Not Significant&quot; de$diffabundant[de$log2FoldChange &lt; -5 &amp; de$log2FoldChange &gt;= 5 &amp; de$adjusted_pvalue &lt; 0.05] &lt;- &quot;Pass p-value &amp; Log2FC cuttoff&quot; de$diffabundant[de$log2FoldChange &gt;= 5 &amp; de$adjusted_pvalue &lt;= 0.05] &lt;- &quot;Up&quot; de$diffabundant[de$log2FoldChange &lt; -5 &amp; de$adjusted_pvalue &lt;= 0.05] &lt;- &quot;Down&quot; head(de) gene_symbol UID seq log2FoldChange HGLibB_38324 PRDM13 HGLibB_38324 GCAAGTACCTGTCAGACCGC 11.516058 HGLibB_33525 OR11H1 HGLibB_33525 ACAACATGGTCAATAATGTT 7.846384 HGLibA_32966 NUDT2 HGLibA_32966 ATGAGCACCAAGCCTACCGC 11.697438 HGLibA_22142 HS6ST1 HGLibA_22142 TCACCTGGGCGTGCGCAGCG 8.995157 HGLibA_07161 CAPN15 HGLibA_07161 CATGTCGTCCACCAGCACCG 8.341491 HGLibA_36228 PGC HGLibA_36228 ACGACTCGCTGGGGTTGAAG 10.546714 logCPM LR pvalue adjusted_pvalue diffabundant HGLibB_38324 10.783644 208.4698 2.962916e-47 1.699914e-42 Up HGLibB_33525 8.149150 173.5387 1.248340e-39 3.581049e-35 Up HGLibA_32966 8.734443 165.5451 6.954012e-38 1.329908e-33 Up HGLibA_22142 10.028787 132.4452 1.195597e-30 1.714875e-26 Up HGLibA_07161 9.138581 126.4760 2.419048e-29 2.775761e-25 Up HGLibA_36228 7.590395 123.9671 8.565128e-29 8.190118e-25 Up # Finally, we can organize the labels nicely using the &#39;ggrepel&#39; package and # the geom_text_repel() function g_down &lt;- which(de$log2FoldChange &gt; 5 &amp; de$adjusted_pvalue &lt;= 0.05) g_up &lt;- which(de$log2FoldChange &lt; -5 &amp; de$adjusted_pvalue &lt;= 0.05) de$delabel &lt;- NA de$delabel[c(g_down[1:20], g_up[1:20])] &lt;- de$gene_symbol[c(g_down[1:20], g_up[1:20])] # plot adding up all layers we have seen so far ggplot(data = de, aes(x = log2FoldChange, y = -log10(adjusted_pvalue), col = diffabundant, label = delabel)) + geom_point() + theme_minimal() + geom_text_repel(max.overlaps = Inf) + scale_color_manual(values = c(&quot;blue&quot;, &quot;black&quot;, &quot;gray&quot;, &quot;red&quot;)) + geom_vline(xintercept = c(-5, 5), col = &quot;darkred&quot;) + geom_hline(yintercept = -log10(0.05), col = &quot;darkred&quot;) "],["differential-abundance-analysis-at-gene-level.html", "Differential abundance analysis at gene level", " Differential abundance analysis at gene level # Create a list of genes with sgRNA indices to use in fry test index argument genesymbols &lt;- yy.norm$genes[, 1] genesymbollist &lt;- list() unq &lt;- unique(genesymbols) unq &lt;- unq[!is.na(unq)] for (i in unq) { sel &lt;- genesymbols == i &amp; !is.na(genesymbols) if (sum(sel) &gt; 3) genesymbollist[[i]] &lt;- which(sel) } fry.res &lt;- fry(yy.norm, index = genesymbollist, design, contrast = &quot;groupToxA&quot;) datatable(format(fry.res, format = &quot;e&quot;, digits = 3)) "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
